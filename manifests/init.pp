# @summary Manage Apache NiFi
#
# Install, configure and run Apache NiFi
#
# @param version
#   The version of Apache NiFi. This must match the version in the
#   tarball. This is used for managing files, directories and paths in
#   the service.
#
# @param user
#   The user owning the nifi installation files, and running the
#   service.
#
# @param group
#   The group owning the nifi installation files, and running the
#   service.
#
# @param download_url
#   Where to download the binary installation tarball from.
#
# @param download_archive_type
#   The archive type of the downloaded tarball.
#
# @param download_checksum
#   The expected checksum of the downloaded tarball. This is used for
#   verifying the integrity of the downloaded tarball.
#
# @param download_checksum_type
#   The checksum type of the downloaded tarball. This is used for
#   verifying the integrity of the downloaded tarball.
#
# @param download_tmp_dir
#   Temporary directory for downloading the tarball.
#
# @param service_limit_nofile
#   The limit on number of open files permitted for the service. Used
#   for LimitNOFILE= in nifi.service.
#
# @param service_limit_nproc
#   The limit on number of processes permitted for the service. Used
#   for LimitNPROC= in nifi.service.
#
# @param install_root
#   The root directory of the nifi installation.
#
# @param var_directory
#   The root of the writable paths used by NiFi. Nifi will create
#   directories beneath this path.  This will implicitly add nifi
#   properties for working directories and repositories.
#
# @param log_directory
#   The directory where NiFi stores its user, app and bootstrap logs. Nifi will
#   create log files beneath this path and take care of log rotation and
#   deletion.
#
# @param config_directory
#   Directory for NiFi version independent configuration files to be kept
#   across NiFi version upgrades. NiFi will also write generated configuration
#   files to this directory. This is used in addition to the "./conf"
#   directory within each NiFi installation.
#
# @param nifi_properties
#   Hash of parameter key/values to be added to conf/nifi.properties.
#
# @param cluster
#   If true, enables the built-in zookeeper cluster for shared configuration
#   and state management. The cluster_nodes parameter is used to configure the
#   zookeeper cluster, and nifi will connect to their local zookeper instance.
#
# @param cluster_nodes
#   A hash of zookeeper cluster nodes and their ID. The ID must be an integer
#   between 1 and 255, unique in the cluster, and must not be changed once set.
#
#  The hash must be structured like { 'fqdn.example.com' => { 'id' => 1 },... }
#
# @param initial_admin_identity
#   The initial admin identity used in the authorizers.xml file by NiFi for
#   policies when creating the flow.xml file. This is useful when connecting
#   NiFi to an external authentication source.
#
# @param zookeeper_connect_string
#   The zookeeper connect string is autogenerated from the `cluster_nodes` as
#   well as the zookeeper client port parameteres. To override this, set the
#   connecct string using this parameter.
#
# @param zookeeper_client_port
#   When clustering Nifi, this port is used by NiFi clustering and state
#   management. This is used for unencrypted communication between NiFi
#   zookeeper client and the embedded zookeeper server.
#
#   Depending on the module parameter `zookeeper_use_secure_client_port`,
#   NiFi will use either this port or the port controlled by the parameter
#   `zookeeper_secure_client_port`.
#
# @param zookeeper_secure_client_port
#   When clustering Nifi, this port is used by NiFi clustering and state
#   management. This is used for encrypted communication between NiFi
#   zookeeper client and the embedded zookeeper server.
#
#   Depending on the module parameter `zookeeper_use_secure_client_port`,
#   NiFi will use either this port or the port controlled by the parameter
#   `zookeeper_client_port`.
#
# @param zookeeper_use_secure_client_port
#   Controls if the NiFi cluster will use TLS to connnect to the embedded zookeeper.
#   If true, NiFi will use TLS and connect to the `zookeeper_secure_client_port`.
#   If false, NiFi will use cleartext communication to connect to zookeeper on the
#   `zookeeper_client_port`.
#
# @example Defaults
#   include nifi
#
# @example Downloading from a different repository
#   class { 'nifi':
#     version           => 'x.y.z',
#     download_url      => 'https://my.local.repo.example.com/apache/nifi/nifi-x.y.z.tar.gz',
#     download_checksum => 'abcde...',
#   }
#
# @example Configuring a NiFi cluster
#   class { 'nifi':
#     cluster       => true,
#     cluster_nodes => {
#       'nifi-1.example.com' => { 'id' => 1 },
#       'nifi-2.example.com' => { 'id' => 2 },
#       'nifi-3.example.com' => { 'id' => 3 },
#     }
#   }
#
class nifi (
  String $version = '1.18.0',
  Enum['zip', 'tar.gz'] $download_archive_type = 'zip',
  String $download_url = "https://dlcdn.apache.org/nifi/${version}/nifi-${version}-bin.${download_archive_type}",
  String $download_checksum = 'f8eaf0b805e3094682da668f1097ccd98deec35240c677c2089cb486d69f0b64',
  String $download_checksum_type = 'sha256',
  Stdlib::Absolutepath $download_tmp_dir = '/var/tmp',
  String $user = 'nifi',
  String $group = 'nifi',
  Integer $service_limit_nofile = 50000,
  Integer $service_limit_nproc = 10000,
  Hash[String,Nifi::Property] $nifi_properties = {},
  Stdlib::Absolutepath $install_root = '/opt/nifi',
  Stdlib::Absolutepath $var_directory = '/var/opt/nifi',
  Stdlib::Absolutepath $log_directory = '/var/log/nifi',
  Stdlib::Absolutepath $config_directory = '/opt/nifi/config',
  Boolean $cluster = false,
  Hash[
    Stdlib::Fqdn, Struct[{ id => Integer[1,255] }]
  ] $cluster_nodes = {},
  Optional[String] $initial_admin_identity = undef,
  Stdlib::Port::Unprivileged $zookeeper_client_port = 2181,
  Stdlib::Port::Unprivileged $zookeeper_secure_client_port = 2281,
  Boolean $zookeeper_use_secure_client_port = true,
  Optional[String] $zookeeper_connect_string = undef,
) {
  class { 'nifi::install':
    install_root           => $install_root,
    version                => $version,
    user                   => $user,
    group                  => $group,
    download_archive_type  => $download_archive_type,
    download_url           => $download_url,
    download_checksum      => $download_checksum,
    download_checksum_type => $download_checksum_type,
    download_tmp_dir       => $download_tmp_dir,
    config_directory       => $config_directory,
    var_directory          => $var_directory,
    log_directory          => $log_directory,
  }

  class { 'nifi::config':
    install_root                     => $install_root,
    user                             => $user,
    group                            => $group,
    config_directory                 => $config_directory,
    var_directory                    => $var_directory,
    nifi_properties                  => $nifi_properties,
    version                          => $version,
    cluster                          => $cluster,
    cluster_nodes                    => $cluster_nodes,
    zookeeper_client_port            => $zookeeper_client_port,
    zookeeper_secure_client_port     => $zookeeper_secure_client_port,
    zookeeper_use_secure_client_port => $zookeeper_use_secure_client_port,
    zookeeper_connect_string         => $zookeeper_connect_string,
  }

  class { 'nifi::service':
    install_root  => $install_root,
    version       => $version,
    user          => $user,
    limit_nofile  => $service_limit_nofile,
    limit_nproc   => $service_limit_nproc,
    log_directory => $log_directory,
  }

  Class['nifi::install'] -> Class['nifi::config'] ~> Class['nifi::service']
}
